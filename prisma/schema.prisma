datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Bot {
  id          String   @id @default(cuid())
  name        String
  imageUrl    String
  personality String
  background  String
  authToken   String   @default(uuid())
  clientToken String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  twitterSettings TwitterSettings?
  wallet      BotWallet?
  messages    Message[]
  settings    BotSettings?
  tweetingEnabled Boolean @default(false)
  tweetInterval   Int     @default(180) // minutes between tweets
  lastTweetAt     DateTime?
  twitterUsername String?  // Optional: if you want to track Twitter usernames
  twitterUserId   String?  // Optional: store Twitter user ID
}

model LandingPage {
  id           String   @id @default(cuid())
  tokenAddress String   @unique
  botId        String
  name         String
  imageUrl     String
  personality  String
  background   String
  status       String  @default("pending")
  error        String?
  website      String?
  twitter      String?
  telegram     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model TwitterSettings {
  id           String   @id @default(cuid())
  botId        String   @unique
  clientToken  String
  appKey       String
  appSecret    String
  accessToken  String
  accessSecret String
  bot          Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
}

model TokenDeployment {
  id          String   @id @default(cuid())
  clientToken String
  createdAt   DateTime @default(now())

  @@index([clientToken, createdAt])
}

model BotWallet {
  id         String   @id @default(cuid())
  botId      String   @unique
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bot        Bot      @relation(fields: [botId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  botId     String
  role      String   // 'user' or 'assistant'
  content   String   @db.Text
  createdAt DateTime @default(now())
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@index([botId, createdAt])
}

model ClientWallet {
  id            String   @id @default(cuid())
  clientToken   String   @unique
  walletAddress String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BotSettings {
  id          String   @id @default(cuid())
  botId       String   @unique
  apiSettings Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bot         Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
}